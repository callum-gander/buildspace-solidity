{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","contractABI","abi","checkIfWalletConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","useEffect","wave","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","waveTxn","hash","className","onClick","ReactDOM","render","document","getElementById"],"mappings":"krdAKe,SAASA,IACpB,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAgCF,mBAAS,IAAzC,mBAGMG,GAHN,UAGoBC,EAAIA,KAElBC,EAAsB,uCAAG,kCAAAC,EAAA,oEAEFC,OAAbC,EAFe,EAEfA,SAFe,uBAKnBC,QAAQC,IAAI,gCALO,0BAQnBD,QAAQC,IAAI,6BAA8BF,GARvB,wBAWAA,EAASG,QAAQ,CAAEC,OAAQ,iBAX3B,QAaC,KAFlBC,EAXiB,QAaVC,QACHC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,+BAAgCK,GAC5Cb,EAAkBa,IAElBN,QAAQC,IAAI,+BAlBO,kDAqBvBD,QAAQC,IAAR,MArBuB,0DAAH,qDAyBtBM,EAAa,uCAAG,gCAAAV,EAAA,oEAEOC,OAAbC,EAFM,EAENA,SAFM,uBAKVS,MAAM,iBALI,0CASST,EAASG,QAAQ,CACpCC,OAAQ,wBAVE,OASRC,EATQ,OAadJ,QAAQC,IAAI,YAAaG,EAAS,IAClCX,EAAkBW,EAAS,IAdb,kDAgBdJ,QAAQC,IAAR,MAhBc,0DAAH,qDAoBnBQ,qBAAU,WACNb,MACD,IAEH,IAAMc,EAAI,uCAAG,wCAAAb,EAAA,oEAEgBC,SAAbC,EAFH,EAEGA,UAFH,wBAIKY,EAAW,IAAIC,IAAOC,UAAUC,aAAaf,GAC7CgB,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SA1D1B,6CA4DRxB,EACAqB,GATH,SAYiBE,EAAmBE,gBAZpC,cAYGC,EAZH,OAaDpB,QAAQC,IAAI,gCAAiCmB,EAAMC,YAblD,UAeqBJ,EAAmBP,OAfxC,eAeKY,EAfL,OAgBDtB,QAAQC,IAAI,YAAaqB,EAAQC,MAhBhC,UAkBaN,EAAmBE,gBAlBhC,QAkBDC,EAlBC,OAmBDpB,QAAQC,IAAI,gCAAiCmB,EAAMC,YAnBlD,wBAqBDrB,QAAQC,IAAI,iCArBX,oHAAH,qDAgDV,OACI,yBAAKuB,UAAU,iBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,UAAf,2BAEA,yBAAKA,UAAU,OAAf,gFAKA,4BAAQA,UAAU,aAAaC,QAASf,GAAxC,eAIElB,GACE,4BAAQgC,UAAU,aAAaC,QAASlB,GAAxC,oBCvHpBmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3d7a0cce.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport './App.css'\nimport abi from './utils/WavePortal.json'\n\nexport default function App() {\n    const [currentAccount, setCurrentAccount] = useState('')\n    const [allWaves, setAllWaves] = useState([])\n\n    const contractAddress = '0x2Eb0be25a898d8F0B2087C8e347B6C6d6b94c054'\n    const contractABI = abi.abi\n\n    const checkIfWalletConnected = async () => {\n        try {\n            const { ethereum } = window\n\n            if (!ethereum) {\n                console.log('Make sure you have metamask!')\n                return\n            } else {\n                console.log('We have an ethereum object', ethereum)\n            }\n\n            const accounts = await ethereum.request({ method: 'eth_accounts' })\n\n            if (accounts.length !== 0) {\n                const account = accounts[0]\n                console.log('Found an authorized account:', account)\n                setCurrentAccount(account)\n            } else {\n                console.log('No authorized account found')\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const connectWallet = async () => {\n        try {\n            const { ethereum } = window\n\n            if (!ethereum) {\n                alert('Get Metamask!')\n                return\n            }\n\n            const accounts = await ethereum.request({\n                method: 'eth_requestAccounts',\n            })\n\n            console.log('Connected', accounts[0])\n            setCurrentAccount(accounts[0])\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        checkIfWalletConnected()\n    }, [])\n\n    const wave = async () => {\n        try {\n            const { ethereum } = window\n            if (ethereum) {\n                const provider = new ethers.providers.Web3Provider(ethereum)\n                const signer = provider.getSigner()\n                const wavePortalContract = new ethers.Contract(\n                    contractAddress,\n                    contractABI,\n                    signer\n                )\n\n                let count = await wavePortalContract.getTotalWaves()\n                console.log('Retrieved total wave count...', count.toNumber())\n\n                const waveTxn = await wavePortalContract.wave()\n                console.log('Mining...', waveTxn.hash)\n\n                count = await wavePortalContract.getTotalWaves()\n                console.log('Retrieved total wave count...', count.toNumber())\n            } else {\n                console.log(\"Ethereum object doesn't exist\")\n            }\n        } catch (error) {}\n    }\n\n    const getAllWaves = async () => {\n        try {\n            const { ethereum } = window\n            if (ethereum) {\n                const provider = new ethers.providers.Web3Provider(ethereum)\n                const signer = new provider.getSigner()\n                const wavePortalContract = new ethers.Contract(\n                    contractAddress,\n                    contractABI,\n                    signer\n                )\n\n                let count = await wavePortalContract.getTotalWaves()\n                console.log('Retrieved total wave count...', count.toNumber())\n            } else {\n                console.log('Ethereum object does not exist')\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    return (\n        <div className=\"mainContainer\">\n            <div className=\"dataContainer\">\n                <div className=\"header\">ðŸ‘‹ Hey there!</div>\n\n                <div className=\"bio\">\n                    I am Sid and I'm learning Web3! Connect your Ethereum wallet\n                    and wave at me!\n                </div>\n\n                <button className=\"waveButton\" onClick={wave}>\n                    Wave at Me\n                </button>\n\n                {!currentAccount && (\n                    <button className=\"waveButton\" onClick={connectWallet}>\n                        Connect Wallet\n                    </button>\n                )}\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}